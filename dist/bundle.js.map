{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://understanding-typescript/./src/components/base-component.ts","webpack://understanding-typescript/./src/util/validation.ts","webpack://understanding-typescript/./src/decorators/autobind.ts","webpack://understanding-typescript/./src/models/project.ts","webpack://understanding-typescript/./src/state/project-state.ts","webpack://understanding-typescript/./src/components/project-input.ts","webpack://understanding-typescript/./src/components/project-item.ts","webpack://understanding-typescript/./src/components/project-list.ts","webpack://understanding-typescript/./src/app.ts"],"sourcesContent":["// Component Base Class, any kind of HTMLElement <T><U>\r\n\r\nexport const something = \"...\";\r\n\r\nexport default abstract class Component<\r\n  T extends HTMLElement,\r\n  U extends HTMLElement\r\n> {\r\n  templateElement: HTMLTemplateElement;\r\n  hostElement: T;\r\n  element: U;\r\n\r\n  constructor(\r\n    templateId: string,\r\n    hostElementId: string,\r\n    insertAtStart: boolean,\r\n    newElementId?: string\r\n  ) {\r\n    this.templateElement = document.getElementById(\r\n      templateId\r\n    )! as HTMLTemplateElement; // we have to know the type therefore, do typecasting.\r\n    this.hostElement = document.getElementById(hostElementId)! as T;\r\n\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    ); // content of <template>, deep clone (all nested el inside template accessible)\r\n    this.element = importedNode.firstElementChild as U; // <template><section>...</section></template>\r\n    if (newElementId) {\r\n      this.element.id = newElementId; // control flow based on params active or finished projects\r\n    }\r\n    this.attach(insertAtStart);\r\n  }\r\n\r\n  private attach(insertAtBeginning: boolean) {\r\n    this.hostElement.insertAdjacentElement(\r\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\r\n      this.element\r\n    ); // <section></section before <div#app> end tag\r\n  }\r\n\r\n  // Child classes are forced to use these methods\r\n  abstract configure(): void;\r\n  abstract renderContent(): void;\r\n}\r\n","// Validation (re-usable)\r\n// ? = optional value\r\nexport interface Validatable {\r\n  value: string | number;\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\n/**\r\n *\r\n * @param validatableInput\r\n * @returns true or false\r\n */\r\n// Must follow the rules of the Validatable interface\r\nexport function validate(validatableInput: Validatable) {\r\n  let isValid = true;\r\n  // If the input is set to required then true and trim input when the length is greater than 0\r\n  if (validatableInput.required) {\r\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\r\n  }\r\n  // If the input is not null and the type is a string then true AND length should be greater than minlength\r\n  if (\r\n    validatableInput.minLength != null &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length >= validatableInput.minLength;\r\n  }\r\n  // If the input is not the maxlength and a string then is the length less than maxlength\r\n  if (\r\n    validatableInput.maxLength != null &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\r\n  }\r\n\r\n  // If the min input value is not null in and the value is a number then isValid (true) AND value is greater or equal to the min value\r\n  if (\r\n    validatableInput.min != null &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value >= validatableInput.min;\r\n  }\r\n\r\n  // If the max input value is not null in and the value is a number then isValid (true) id AND value is less or equal to the max value\r\n  if (\r\n    validatableInput.max != null &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value <= validatableInput.max;\r\n  }\r\n  return isValid;\r\n}\r\n","// Autobind Decorator\r\n// Args: target, method decorator, methods are properties which hold functions\r\n// _ = params you are not going to use them but maybe you need it\r\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\r\n  const originalMethod = descriptor.value; // Submit handler whole method text\r\n  const adjDescriptor: PropertyDescriptor = {\r\n    configurable: true, // We can use the decorator\r\n    get() {\r\n      const boundFn = originalMethod.bind(this); // submitHanlder.bind(this)\r\n      return boundFn; // return result of function\r\n    },\r\n  };\r\n  return adjDescriptor; // You just need to return this, I don't know why...\r\n}\r\n","// Project Type\r\nexport enum ProjectStatus {\r\n  Active,\r\n  Finished,\r\n}\r\n\r\nexport class Project {\r\n  constructor(\r\n    public id: string,\r\n    public title: string,\r\n    public description: string,\r\n    public people: number,\r\n    public status: ProjectStatus\r\n  ) {}\r\n}\r\n","import { Project, ProjectStatus } from \"../models/project\";\r\n\r\n// Project State Management\r\ntype Listener<T> = (items: T[]) => void;\r\n\r\nclass State<T> {\r\n  protected listeners: Listener<T>[] = []; // listeners array of function references\r\n\r\n  addListener(listenerFn: Listener<T>) {\r\n    this.listeners.push(listenerFn); // push function inside listeners array\r\n  }\r\n}\r\n\r\nexport class ProjectState extends State<Project> {\r\n  private projects: Project[] = []; // projects array using Project class\r\n  private static instance: ProjectState; // instance itself in a variable\r\n\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  static getInstance() {\r\n    // If there is an instance then return instance\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    // If not create new ProjectState and return instance\r\n    this.instance = new ProjectState();\r\n    return this.instance;\r\n  }\r\n\r\n  addProject(title: string, description: string, numOfPeople: number) {\r\n    const newProject = new Project(\r\n      Math.random().toString(),\r\n      title,\r\n      description,\r\n      numOfPeople,\r\n      ProjectStatus.Active\r\n    );\r\n    this.projects.push(newProject); // Stop het nieuwe project in projects array\r\n    this.updateListeners();\r\n  }\r\n\r\n  moveProject(projectId: string, newStatus: ProjectStatus) {\r\n    const project = this.projects.find((prj) => prj.id === projectId);\r\n    if (project && project.status !== newStatus) {\r\n      project.status = newStatus;\r\n      this.updateListeners();\r\n    }\r\n  }\r\n\r\n  private updateListeners() {\r\n    // Loop through all function references\r\n    for (const listenerFn of this.listeners) {\r\n      listenerFn(this.projects.slice()); // copy of array\r\n    }\r\n  }\r\n}\r\n\r\nconsole.log(\"Running...\");\r\n\r\nexport const projectState = ProjectState.getInstance(); // instance in variable\r\n","// . = locatie waar je zit\r\n// .. = 1 niveau omhoog\r\nimport Cmp from \"./base-component\";\r\nimport * as Validation from \"../util/validation\";\r\nimport { autobind as Autobind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\n\r\nexport class ProjectInput extends Cmp<HTMLDivElement, HTMLFormElement> {\r\n  titleInputElement: HTMLInputElement;\r\n  descriptionInputElement: HTMLInputElement;\r\n  peopleInputElement: HTMLInputElement;\r\n\r\n  constructor() {\r\n    super(\"project-input\", \"app\", true, \"user-input\");\r\n    this.titleInputElement = this.element.querySelector(\r\n      \"#title\"\r\n    ) as HTMLInputElement;\r\n    this.descriptionInputElement = this.element.querySelector(\r\n      \"#description\"\r\n    ) as HTMLInputElement;\r\n    this.peopleInputElement = this.element.querySelector(\r\n      \"#people\"\r\n    ) as HTMLInputElement;\r\n    this.configure();\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"submit\", this.submitHandler);\r\n  }\r\n\r\n  renderContent() {}\r\n\r\n  // Tuples -> Fetching User Input\r\n  // Return a tuple or nothing (void)\r\n  private gatherUserInput(): [string, string, number] | void {\r\n    const enteredTitle = this.titleInputElement.value;\r\n    const enteredDescription = this.descriptionInputElement.value;\r\n    const enteredPeople = this.peopleInputElement.value;\r\n\r\n    const titleValidatable: Validation.Validatable = {\r\n      value: enteredTitle,\r\n      required: true,\r\n    };\r\n\r\n    const descriptionValidatable: Validation.Validatable = {\r\n      value: enteredDescription,\r\n      required: true,\r\n      minLength: 5,\r\n    };\r\n\r\n    const peopleValidatable: Validation.Validatable = {\r\n      value: +enteredPeople,\r\n      required: true,\r\n      min: 1,\r\n      max: 5,\r\n    };\r\n\r\n    // Form validation (Client-side) in TypeScript\r\n    if (\r\n      !Validation.validate(titleValidatable) ||\r\n      !Validation.validate(descriptionValidatable) ||\r\n      !Validation.validate(peopleValidatable)\r\n    ) {\r\n      alert(\"Invalid input, please try again!\");\r\n      return;\r\n    } else {\r\n      return [enteredTitle, enteredDescription, +enteredPeople];\r\n    }\r\n  }\r\n\r\n  // Empty inputs after form submission (Client-side)\r\n  private clearInputs() {\r\n    this.titleInputElement.value = \"\";\r\n    this.descriptionInputElement.value = \"\";\r\n    this.peopleInputElement.value = \"\";\r\n  }\r\n\r\n  // Method decorator = Can be added to submit handler\r\n  @Autobind\r\n  private submitHandler(event: Event) {\r\n    event.preventDefault();\r\n    const userInput = this.gatherUserInput();\r\n    // Tuples are arrays so we should check for arrays (user input)\r\n    if (Array.isArray(userInput)) {\r\n      const [title, desc, people] = userInput;\r\n      projectState.addProject(title, desc, people);\r\n      this.clearInputs();\r\n    }\r\n  }\r\n}\r\n","import { Draggable } from \"../models/drag-drop\";\r\nimport { Project } from \"../models/project\";\r\nimport Component from \"./base-component\";\r\nimport { autobind } from \"../decorators/autobind\";\r\n\r\nexport class ProjectItem\r\n  extends Component<HTMLUListElement, HTMLLIElement>\r\n  implements Draggable\r\n{\r\n  private project: Project;\r\n\r\n  // Getter\r\n  get persons() {\r\n    if (this.project.people == 1) {\r\n      return \"1 person\";\r\n    } else {\r\n      return `${this.project.people} persons`;\r\n    }\r\n  }\r\n\r\n  constructor(hostId: string, project: Project) {\r\n    super(\"single-project\", hostId, false, project.id);\r\n    this.project = project;\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @autobind\r\n  dragStartHandler(event: DragEvent) {\r\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\r\n    event.dataTransfer!.effectAllowed = \"move\"; // how the cursor will look like\r\n  }\r\n\r\n  dragEndHandler(_: DragEvent) {\r\n    console.log(\"DragEnd\");\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\r\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\r\n  }\r\n\r\n  renderContent() {\r\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\r\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\"; // getter\r\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\r\n  }\r\n}\r\n","import { DragTarget } from \"../models/drag-drop\";\r\nimport { Project, ProjectStatus } from \"../models/project\";\r\nimport Component from \"./base-component\";\r\nimport { autobind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\nimport { ProjectItem } from \"./project-item\";\r\n\r\n// ProjectList Class\r\nexport class ProjectList\r\n  extends Component<HTMLDivElement, HTMLElement>\r\n  implements DragTarget\r\n{\r\n  assignedProjects: Project[];\r\n\r\n  constructor(private type: \"active\" | \"finished\") {\r\n    super(\"project-list\", \"app\", false, `${type}-projects`);\r\n    this.assignedProjects = [];\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @autobind\r\n  dragOverHandler(event: DragEvent) {\r\n    // Is the text in the draggable component?\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\r\n      event.preventDefault();\r\n      const listEl = this.element.querySelector(\"ul\")!;\r\n      listEl.classList.add(\"droppable\");\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  dropHandler(event: DragEvent) {\r\n    event.preventDefault();\r\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\r\n    projectState.moveProject(\r\n      prjId,\r\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  dragLeaveHandler(_: DragEvent) {\r\n    const listEl = this.element.querySelector(\"ul\")!;\r\n    listEl.classList.remove(\"droppable\");\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\r\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\r\n    this.element.addEventListener(\"drop\", this.dropHandler);\r\n\r\n    projectState.addListener((projects: Project[]) => {\r\n      const relevantProjects = projects.filter((prj) => {\r\n        if (this.type === \"active\") {\r\n          return prj.status === ProjectStatus.Active;\r\n        }\r\n        return prj.status === ProjectStatus.Finished;\r\n      });\r\n      this.assignedProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n  }\r\n\r\n  renderContent() {\r\n    const listId = `${this.type}-projects-list`;\r\n    this.element.querySelector(\"ul\")!.id = listId; // ul#x-projects-list\r\n    this.element.querySelector(\"h2\")!.textContent =\r\n      this.type.toUpperCase() + \" PROJECTS\"; // <h2>ACTIVE/FINISHED PROJECTS</h2>\r\n  }\r\n\r\n  private renderProjects() {\r\n    const listEl = document.getElementById(\r\n      `${this.type}-projects-list`\r\n    )! as HTMLUListElement;\r\n    listEl.innerHTML = \"\"; // No double item fix\r\n    // Loop through all projects\r\n    for (const prjItem of this.assignedProjects) {\r\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem); // no bullet point\r\n    }\r\n  }\r\n}\r\n","import { ProjectInput } from \"./components/project-input\";\r\nimport { ProjectList } from \"./components/project-list\";\r\n\r\nnew ProjectInput();\r\nnew ProjectList(\"active\");\r\nnew ProjectList(\"finished\");\r\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","ProjectState","listeners","addListener","listenerFn","push","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","console","log","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","hostId","persons","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}